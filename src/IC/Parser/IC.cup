package IC.Parser;

import IC.AST.*;
import IC.*;
import IC.Parser.*;
import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Collections;

parser code
{:
	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public boolean printTokens;
	private boolean isPositive = true;
	private String expectedString = "";
	private String foundString;
	private int errorLine;
	private int errorColumn;

	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}

    public int getColumn() {
    		return lexer.getColumnNumber();
    	}
	
	public void syntax_error(Symbol s) {
		expected_token_ids();
		expected_token_ids();
		expected_token_ids();
		List<Integer> expectedIds = expected_token_ids();
		boolean first = true;
		List<String> list = new LinkedList<String>();
		for (Integer symbol:expectedIds) {
			String str = Helper.map.get(symbol.intValue());
			list.add(str);
		}
		Collections.sort(list);
		for (String str:list) {
		if (first) {
			expectedString += "'" + str + "'";
			first = false;
		} else
			expectedString += " or '" + str + "'";
		}
		Token tok = (Token) s;
		foundString = tok.getValue();
		errorLine = tok.getLine();
		errorColumn = tok.getColumn();
	}

	public void report_fatal_error(String message, Object info) throws SyntaxError	{
		done_parsing();
		throw new SyntaxError(errorLine, errorColumn, expectedString, foundString);
	}
:};

//scan with {:
//	Token t = (Token)getScanner().next_token();
//	System.out.println(t.getLine() + ":type: " + t.getTagAsString() + " , value: " + t.getValue());
//	return t;
//:};
////////////////////////////////////
// terminals //
terminal String CLASS_ID, ID;
terminal DELIMITER, CLASS, STATIC, VOID, INT, BOOLEAN, STRING_RESERVED;
terminal LEFT_CUR_PARENTHESES, RIGHT_CUR_PARENTHESES, LEFT_PARENTHESES, RIGHT_PARENTHESES, LEFT_SQUARE_BRACKETS, RIGHT_SQUARE_BRACKETS, COMMA;
terminal String INTEGER;
terminal String STRING;
terminal EXTENDS, RETURN, IF, ELSE, WHILE, BREAK, CONTINUE, THIS, NEW, LENGTH, TRUE, FALSE, NULL;
terminal PLUS, MINUS, MULTIFICATION, DIVISION, MODULO, AND, OR, SMALLER_OR_EQUAL, SMALLER, GREATER_OR_EQUAL, GREATER, EQUAL, NOT_EQUAL, NOT;
terminal DOT;
terminal ASSIGNMENT;
terminal UMINUS; //only for precedence issues
//////////////////////////

////////////////////////////////////////////
// nonterminals //

// "super" nonterminals (defind by the CFG)

nonterminal Program program;
nonterminal ICClass classDecl;
nonterminal List<Field> field;
nonterminal Method method;
nonterminal List<Formal> formals;
nonterminal Type type;
nonterminal Statement stmt;
nonterminal Location location;
nonterminal Expression expr;
nonterminal Call call;
nonterminal StaticCall staticCall;
nonterminal VirtualCall virtualCall;
nonterminal Literal literal;

// "building blocks" nonterminals for "super" nonterminals
// naming convention: classname+super_nonterminal_name

// location
nonterminal ArrayLocation arrayLocationLocation;
nonterminal VariableLocation variableLocationLocation;

// stmt
nonterminal Assignment assignmentStmt;
nonterminal Break breakStmt;
//nonterminal CallStatement callStatementStmt;
nonterminal Continue continueStmt;
nonterminal If ifStmt;
nonterminal LocalVariable localVariableStmt;
nonterminal Return returnStmt;
nonterminal StatementsBlock statementsBlockStmt;
nonterminal While whileStmt;

// expr
nonterminal ExpressionBlock expressionBlockExpr;
nonterminal Length lengthExpr;
nonterminal Literal literalExpr;
nonterminal This thisExpr;

// method
//nonterminal StaticMethod staticMethodMethod;
//nonterminal VirtualMethod virtualMethodMethod;

// type
//nonterminal Type typeOrVoid;
//nonterminal PrimitiveType primitiveTypeType;
//nonterminal UserType userTypeType;

// building blocks nonterminals of building blocks nonterminals
// naming convention: classname+super_nonterminal_name

// newExpr
nonterminal NewArray newArrayNewExpr;
nonterminal NewClass newClassNewExpr;

nonterminal BinaryOps andOp;
nonterminal BinaryOps orOp;
nonterminal BinaryOps relationalOp;
nonterminal BinaryOps eqOp;
nonterminal UnaryOps logicalUnaryOp;
nonterminal BinaryOps plusMinusOp;
nonterminal BinaryOps mulDivModOp;
nonterminal UnaryOps mathUnaryOp;

// custom rules for help with kleene star

nonterminal List<List> fieldOrMethodKS;
nonterminal List<String> idList;
nonterminal List<Statement> stmtKS;
nonterminal List<Expression> exprKS;
nonterminal List<ICClass> classDeclKS;

// Precedence declarations

// TODO: not sure if parentheses are for all with the precedence or only for method calls etc page 8 in pdf

precedence right ASSIGNMENT;
precedence left OR;
precedence left AND;
precedence left EQUAL, NOT_EQUAL;
precedence left SMALLER_OR_EQUAL, SMALLER, GREATER_OR_EQUAL, GREATER;
precedence left PLUS, MINUS;
precedence left MULTIFICATION, DIVISION, MODULO;
precedence right NOT, UMINUS;
precedence left CLASS_ID, ID, INTEGER, STRING, DELIMITER, CLASS, EXTENDS, STATIC, VOID, INT, BOOLEAN, STRING_RESERVED, RETURN, IF, WHILE, BREAK, CONTINUE, THIS, NEW, LENGTH, TRUE, FALSE, NULL, COMMA;
precedence left LEFT_PARENTHESES, RIGHT_PARENTHESES, LEFT_SQUARE_BRACKETS, RIGHT_SQUARE_BRACKETS, LEFT_CUR_PARENTHESES, RIGHT_CUR_PARENTHESES, DOT;
precedence left ELSE;

//////////////
start with program;
// The grammar

program ::= classDeclKS:cl
		{: RESULT = new Program(cl); :}
;
classDeclKS ::= classDecl:c
			{: List<ICClass> cl = new LinkedList<ICClass>(); cl.add(c); RESULT = cl; :}
			| classDeclKS:cl classDecl:c
			{: cl.add(c); RESULT = cl; :}
			|
			{: RESULT = new LinkedList<ICClass>(); :}
;
classDecl ::= CLASS CLASS_ID:cid EXTENDS CLASS_ID:eid LEFT_CUR_PARENTHESES fieldOrMethodKS:fmKS RIGHT_CUR_PARENTHESES
			{: RESULT = new ICClass(cidleft, cid, eid, (List<Field>)(List<?>)(fmKS.get(1)), (List<Method>)(List<?>)(fmKS.get(0))); :}
			| CLASS CLASS_ID:cid LEFT_CUR_PARENTHESES fieldOrMethodKS:fmKS RIGHT_CUR_PARENTHESES
			{: RESULT = new ICClass(cidleft, cid, (List<Field>)(List<?>)(fmKS.get(1)), (List<Method>)(List<?>)(fmKS.get(0))); :}
;
fieldOrMethodKS ::= field:f
				{: List<List> foml = new ArrayList<List>(); List<Method> ml = new LinkedList<Method>(); List<Field> fl = new LinkedList<Field>(); foml.add(ml); fl.addAll(f); foml.add(fl); RESULT = foml; :}
				| method:m
				{: List<List> foml = new ArrayList<List>(); List<Method> ml = new LinkedList<Method>(); List<Field> fl = new LinkedList<Field>(); ml.add(m); foml.add(ml); foml.add(fl); RESULT = foml; :}
				| fieldOrMethodKS:l field:f
				{: ((List<Field>)l.get(1)).addAll(f); RESULT = l; :}
				| fieldOrMethodKS:l method:m
				{: ((List<Method>)l.get(0)).add(m); RESULT = l; :}
				|
				{: List<List> foml = new ArrayList<List>(); List<Method> ml = new LinkedList<Method>(); List<Field> fl = new LinkedList<Field>(); foml.add(ml); foml.add(fl); RESULT = foml; :}		
;
//typeOrVoid ::= VOID
//            {: RESULT = new PrimitiveType(getLine() ,DataTypes.VOID); :}
//            | type:t
//            {: RESULT = t; :}
//;
type ::= INT:i
        {: RESULT = new PrimitiveType(getLine() ,DataTypes.INT); :}
        | BOOLEAN:bool
        {: RESULT = new PrimitiveType(getLine() ,DataTypes.BOOLEAN); :}
        | STRING_RESERVED:str
        {: RESULT = new PrimitiveType(getLine() ,DataTypes.STRING); :}
        | CLASS_ID:classtype
        {: RESULT = new UserType(getLine(), classtype); :}
        | type:t LEFT_SQUARE_BRACKETS RIGHT_SQUARE_BRACKETS
        {: t.incrementDimension(); RESULT = t; :}
;			
field ::= type:pt idList:idl DELIMITER
		{: List<Field> fl = new LinkedList<Field>(); for (String id : idl) {fl.add(new Field(pt, id));} RESULT = fl; :}
;
idList ::= ID:id
		{: List<String> idl = new LinkedList<String>(); idl.add(id); RESULT = idl; :}
		| idList:idl COMMA ID:id
		{: idl.add(id); RESULT = idl; :}
;

method ::= STATIC type:t ID:id LEFT_PARENTHESES formals:f RIGHT_PARENTHESES LEFT_CUR_PARENTHESES stmtKS:sl RIGHT_CUR_PARENTHESES
		{: RESULT = new StaticMethod(t, id, f, sl); :}
		| STATIC VOID ID:id LEFT_PARENTHESES formals:f RIGHT_PARENTHESES LEFT_CUR_PARENTHESES stmtKS:sl RIGHT_CUR_PARENTHESES
		{: RESULT = new StaticMethod(new PrimitiveType(idleft ,DataTypes.VOID), id, f, sl); :}
		| type:t ID:id LEFT_PARENTHESES formals:f RIGHT_PARENTHESES LEFT_CUR_PARENTHESES stmtKS:sl RIGHT_CUR_PARENTHESES
		{: RESULT = new VirtualMethod(t, id, f, sl); :}
		| VOID ID:id LEFT_PARENTHESES formals:f RIGHT_PARENTHESES LEFT_CUR_PARENTHESES stmtKS:sl RIGHT_CUR_PARENTHESES
		{: RESULT = new VirtualMethod(new PrimitiveType(idleft ,DataTypes.VOID), id, f, sl); :}
;
//method ::= staticMethodMethod:sm
//		{: RESULT = sm; :}
//		| virtualMethodMethod:vm
//		{: RESULT = vm; :}
//;
//staticMethodMethod ::= STATIC typeOrVoid:t ID:id LEFT_PARENTHESES formals:f RIGHT_PARENTHESES LEFT_CUR_PARENTHESES stmtKS:sl RIGHT_CUR_PARENTHESES
//					{: RESULT = new StaticMethod(t, id, f, sl); :}
//;
//virtualMethodMethod ::= typeOrVoid:t ID:id LEFT_PARENTHESES formals:f RIGHT_PARENTHESES LEFT_CUR_PARENTHESES stmtKS:sl RIGHT_CUR_PARENTHESES
//					{: RESULT = new VirtualMethod(t, id, f, sl); :}
//;
formals ::= type:pt ID:id
			{: List<Formal> fl = new LinkedList<Formal>(); fl.add(new Formal(pt, id)); RESULT = fl; :}
			| formals:fl COMMA type:pt ID:id
			{: fl.add(new Formal(pt, id)); RESULT = fl; :}
			|
			{: RESULT = new LinkedList<Formal>(); :}
;			
stmtKS ::= stmt:s
			{: List<Statement> sl = new LinkedList<Statement>(); sl.add(s); RESULT = sl; :}
			| stmtKS:sl stmt:s
			{: sl.add(s); RESULT = sl; :}
			|
			{: RESULT = new LinkedList<Statement>(); :}
;
stmt ::= assignmentStmt:as DELIMITER
		{: RESULT = as; :}
		| call:c DELIMITER
		{: RESULT = new CallStatement(c); :}
		| returnStmt:rs DELIMITER
		{: RESULT = rs; :}
		| ifStmt:is
		{: RESULT = is; :}
		| whileStmt:ws
		{: RESULT = ws; :}
		| breakStmt:bs DELIMITER
		{: RESULT = bs; :}
		| continueStmt:cs DELIMITER
		{: RESULT = cs; :}
		| statementsBlockStmt:sb
		{: RESULT = sb; :}
		| localVariableStmt:ls DELIMITER
		{: RESULT = ls; :}
;		
assignmentStmt ::= location:l ASSIGNMENT expr:e
				{: RESULT = new Assignment(l,e); :}
;
breakStmt ::= BREAK:b
			{: RESULT = new Break(getLine()); :}
;
//callStatementStmt ::= call:c DELIMITER
//					{: RESULT = new CallStatement(c); :}
//;
continueStmt ::= CONTINUE:c
					{: RESULT = new Continue(getLine()); :}
; 
ifStmt ::= IF LEFT_PARENTHESES expr:e1 RIGHT_PARENTHESES stmt:s1 ELSE stmt:s2
		{: RESULT = new If(e1, s1, s2); :}
		| IF LEFT_PARENTHESES expr:e1 RIGHT_PARENTHESES stmt:s1
		{: RESULT = new If(e1, s1); :}
;
localVariableStmt ::= type:t ID:id ASSIGNMENT expr:e
					{: RESULT = new LocalVariable(t, id, e); :}
					| type:t ID:id
					{: RESULT = new LocalVariable(t, id); :}
;
returnStmt ::= RETURN:r expr:e
			{: RESULT = new Return(getLine(), e); :}
			| RETURN:r
			{: RESULT = new Return(getLine()); :}
;			
statementsBlockStmt ::= LEFT_CUR_PARENTHESES:lcp stmtKS:sl RIGHT_CUR_PARENTHESES
					{: RESULT = new StatementsBlock(lcpleft, sl); :}
;
whileStmt ::= WHILE LEFT_PARENTHESES expr:e RIGHT_PARENTHESES stmt:s
			{: RESULT = new While(e, s); :}	
;
expr ::= location:l
		{: RESULT = l; :}
		| call:c
		{: RESULT = c; :}
		| thisExpr:te
		{: RESULT = te; :}
		| newClassNewExpr:nce
		{: RESULT = nce; :}
		| newArrayNewExpr:nae
		{: RESULT = nae; :}
		| lengthExpr:le
		{: RESULT = le; :}
		|	expr:ex1 andOp:op expr:ex2
		{:	RESULT=  new LogicalBinaryOp(ex1, op,	ex2); :} %prec AND
		|	expr:ex1 orOp:op expr:ex2
		{:	RESULT=  new LogicalBinaryOp(ex1, op,	ex2); :} %prec OR
		|	expr:ex1 relationalOp:op expr:ex2
		{:	RESULT=  new LogicalBinaryOp(ex1, op,	ex2); :} %prec SMALLER
		|	expr:ex1 eqOp:op expr:ex2
		{:	RESULT=  new LogicalBinaryOp(ex1, op,	ex2); :} %prec EQUAL
		|	logicalUnaryOp:u expr:ex
		{:	RESULT=  new LogicalUnaryOp(u, ex); :} %prec NOT
		|	expr:ex1 plusMinusOp:op expr:ex2
		{:	RESULT=  new MathBinaryOp(ex1, op, ex2); :} %prec MINUS
		|	expr:ex1 mulDivModOp:op expr:ex2
		{:	RESULT=  new MathBinaryOp(ex1, op, ex2); :} %prec MULTIFICATION
		|	mathUnaryOp:u expr:ex
		{:	RESULT=  new MathUnaryOp(u, ex); :} %prec UMINUS
		| literalExpr:le
		{: RESULT = le; :}
		| expressionBlockExpr:eb
		{: RESULT = eb; :}
;		
location ::= variableLocationLocation:vl
			{: RESULT = vl; :}
			| arrayLocationLocation:al
			{: RESULT = al; :}
;
variableLocationLocation ::= expr:e DOT ID:id
							{: RESULT = new VariableLocation(getLine(), e, id); :}
							| ID:id
							{: RESULT = new VariableLocation(getLine(), id); :}
;
arrayLocationLocation ::= expr:e1 LEFT_SQUARE_BRACKETS expr:e2 RIGHT_SQUARE_BRACKETS
							{: RESULT = new ArrayLocation(e1,e2); :}
;
call ::= staticCall:sc
		{: RESULT = sc; :}
		| virtualCall:vc
		{: RESULT = vc; :}
;
staticCall ::= CLASS_ID:cid DOT ID:id LEFT_PARENTHESES exprKS:el RIGHT_PARENTHESES
			{: RESULT = new StaticCall(getLine(), cid, id, el); :}
;
virtualCall ::= ID:id LEFT_PARENTHESES exprKS:el RIGHT_PARENTHESES
				{: RESULT = new VirtualCall(getLine(), id, el); :}
				| expr:e DOT ID:id LEFT_PARENTHESES exprKS:el RIGHT_PARENTHESES
				{: RESULT = new VirtualCall(getLine(), e, id, el); :}
;
exprKS ::= expr:e
			{: List<Expression> el = new LinkedList<Expression>(); el.add(e); RESULT = el; :}
			| exprKS:el COMMA expr:e
			{: el.add(e); RESULT = el; :}
			|
			{: RESULT = new LinkedList<Expression>(); :}
;
thisExpr ::= THIS:t
			{: RESULT = new This(getLine()); :}
;
newClassNewExpr ::= NEW CLASS_ID:cid LEFT_PARENTHESES RIGHT_PARENTHESES
				{: RESULT = new NewClass(getLine(), cid); :}
;
newArrayNewExpr ::= NEW type:pt LEFT_SQUARE_BRACKETS expr:e RIGHT_SQUARE_BRACKETS
				{: RESULT = new NewArray(pt, e); :}
;
lengthExpr ::= expr:e DOT LENGTH
			{: RESULT = new Length(e); :}
;
mathUnaryOp ::=	MINUS
					{:
					isPositive = true;
					RESULT = UnaryOps.UMINUS;
					:}
				;

plusMinusOp	::=	PLUS
					{: 	RESULT= BinaryOps.PLUS; :}
					|	MINUS
					{: 	RESULT= BinaryOps.MINUS;  :}
				;

mulDivModOp	::=	MULTIFICATION
							{: 	RESULT= BinaryOps.MULTIPLY; :}
							|	DIVISION
								{: 	RESULT= BinaryOps.DIVIDE; :}
							|	MODULO
								{: 	RESULT= BinaryOps.MOD; :}
							;

andOp ::= AND
			{:	RESULT = BinaryOps.LAND;:}
			;

orOp ::= OR
			{:	RESULT = BinaryOps.LOR; :}
			;

eqOp ::= EQUAL
			{:	RESULT = BinaryOps.EQUAL; :}
			| 	NOT_EQUAL
			{:	RESULT = BinaryOps.NEQUAL; :}
			;

relationalOp ::= SMALLER_OR_EQUAL
								{:	RESULT = BinaryOps.LTE; :}
								|	SMALLER
									{:	RESULT = BinaryOps.LT; :}
								|	GREATER_OR_EQUAL
									{:	RESULT = BinaryOps.GTE; :}
								|	GREATER
									{:	RESULT = BinaryOps.GT; :}
								;

logicalUnaryOp ::= NOT
						{:	RESULT = UnaryOps.LNEG; :}
					;
literalExpr ::= literal:l
			{: RESULT = l; :}
;
literal ::= INTEGER:i
		{: 
			try {
				String afterRmZeroes = i.replaceFirst("^0+","");
				if (afterRmZeroes.equals(""))
					RESULT = new Literal(getLine(), LiteralTypes.INTEGER, 0);
				else
					if (afterRmZeroes.equals(i)) {
						Helper.checkIfIntIsLegal(i, isPositive);
						RESULT = new Literal(getLine(), LiteralTypes.INTEGER, i);
					}
					else
						throw new SyntaxError(getLine(), getColumn(), "number other than zero should not start with leading zeroes");
			} catch (NumberFormatException e) {
				throw new SyntaxError(getLine(), getColumn(), "Integer out of bound");
			}
		:}
		| STRING:s
		{: RESULT = new Literal(getLine(), LiteralTypes.STRING, s); :}
		| TRUE:t
		{: RESULT = new Literal(getLine(), LiteralTypes.TRUE); :}
		| FALSE:f
		{: RESULT = new Literal(getLine(), LiteralTypes.FALSE); :}
		| NULL:n
		{: RESULT = new Literal(getLine(), LiteralTypes.NULL); :}
;		
expressionBlockExpr ::= LEFT_PARENTHESES expr:e RIGHT_PARENTHESES
					{: RESULT = new ExpressionBlock(e); :}
;